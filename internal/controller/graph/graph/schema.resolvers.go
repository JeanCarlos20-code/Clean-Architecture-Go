package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	"github.com/JeanCarlos20-code/CleanArchitecture/internal/controller/graph/graph/model"
	"github.com/JeanCarlos20-code/CleanArchitecture/internal/core/repositories"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*model.Order, error) {
	dto := repositories.OrderInputDTO{
		Price:     float64(input.Price),
		Tax:       float64(input.Tax),
		IssueDate: input.IssueDate,
	}

	dto.TypeRequisition = "GraphQL"

	output, err := r.CreateOrderUseCase.Execute(dto)
	if err != nil {
		return nil, err
	}
	return &model.Order{
		ID:              output.ID,
		Price:           float64(output.Price),
		Tax:             float64(output.Tax),
		FinalPrice:      float64(output.FinalPrice),
		IssueDate:       output.IssueDate,
		TypeRequisition: output.TypeRequisition,
		DeleteAt:        output.DeleteAt,
	}, nil
}

// ListOrders is the resolver for the listOrders field.
func (r *queryResolver) ListOrders(ctx context.Context, page *int32, limit *int32, sort *string) ([]*model.Order, error) {
	var p, l int
	var s string

	if page != nil {
		p = int(*page)
	}
	if limit != nil {
		l = int(*limit)
	}
	if sort != nil {
		s = *sort
	}

	output, err := r.ListOrderUseCase.Execute(p, l, s)
	if err != nil {
		return nil, err
	}

	var orders []*model.Order
	for _, o := range output {
		orders = append(orders, &model.Order{
			ID:              o.ID,
			Price:           float64(o.Price),
			Tax:             float64(o.Tax),
			FinalPrice:      float64(o.FinalPrice),
			IssueDate:       o.IssueDate,
			TypeRequisition: o.TypeRequisition,
			DeleteAt:        o.DeleteAt,
		})
	}

	return orders, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
