// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package SQLC

import (
	"context"
	"database/sql"
)

const listCategories = `-- name: ListCategories :many
SELECT id, price, tax, final_price, issue_date, type_requisition, delete_at FROM orders WHERE delete_at IS NULL
`

func (q *Queries) ListCategories(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Tax,
			&i.FinalPrice,
			&i.IssueDate,
			&i.TypeRequisition,
			&i.DeleteAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const save = `-- name: Save :exec
INSERT INTO orders (id, price, tax, final_price, issue_date, type_requisition, delete_at) 
VALUES (?,?,?,?,?,?,?)
`

type SaveParams struct {
	ID              string
	Price           float64
	Tax             float64
	FinalPrice      float64
	IssueDate       sql.NullTime
	TypeRequisition string
	DeleteAt        sql.NullTime
}

func (q *Queries) Save(ctx context.Context, arg SaveParams) error {
	_, err := q.db.ExecContext(ctx, save,
		arg.ID,
		arg.Price,
		arg.Tax,
		arg.FinalPrice,
		arg.IssueDate,
		arg.TypeRequisition,
		arg.DeleteAt,
	)
	return err
}
